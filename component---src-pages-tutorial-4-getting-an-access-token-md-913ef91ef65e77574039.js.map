{"version":3,"file":"component---src-pages-tutorial-4-getting-an-access-token-md-913ef91ef65e77574039.js","mappings":"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","sources":["webpack://cloudmanager-api-docs/./src/pages/tutorial/4-getting-an-access-token.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/cloudmanager-api-docs/cloudmanager-api-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Glitch from \"../../components/glitch\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"tutorial-step-4---obtaining-an-access-token\"\n    }}>{`Tutorial Step 4 - Obtaining an Access Token`}</h1>\n    <p>{`The JSON object sent to the webhook is very minimal -- it largely consists of event metadata (e.g. the timestamp of the event) and a URL to either the pipeline execution. In general, the webhook implementation will need to call the Cloud Manager API to get additional information. In the case of this tutorial, the webhook is actually going to make two API calls for more information. That, however, is for the next step...`}</p>\n    <p>{`In this step, we're going to lay the groundwork for making those API calls by obtaining an `}<em parentName=\"p\">{`access token`}</em>{` which will be passed to the API for the purpose of authentication. Adobe I/O uses JSON Web Tokens (JWT) to obtain access tokens. The webhook will create a signed JWT and then `}<em parentName=\"p\">{`exchange`}</em>{` that with Adobe's identity management system for an access token.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up-the-environment-variables\"\n    }}>{`Setting up the Environment Variables`}</h2>\n    <p>{`The JWT token is created, signed and exchanged using the `}<inlineCode parentName=\"p\">{`CLIENT_ID`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`CLIENT_SECRET`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ORGANIZATION`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`TECHNICAL_ACCOUNT_ID`}</inlineCode>{` variables along with the `}<inlineCode parentName=\"p\">{`private.key`}</inlineCode>{` file in the `}<inlineCode parentName=\"p\">{`.data`}</inlineCode>{` directory, so the first step is to make sure the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file has all of these variable populated and the `}<inlineCode parentName=\"p\">{`private.key`}</inlineCode>{` file is in place. You should have done this in Step 0, but if not (or if you are using Glitch), you will need to do this now.`}</p>\n    <h2 {...{\n      \"id\": \"adding-dependencies\"\n    }}>{`Adding Dependencies`}</h2>\n    <p>{`For the exchange process, we'll use Adobe's `}<a href=\"https://github.com/adobe/jwt-auth\" target=\"_new\">{`jwt-auth`}</a>{` library. If you are editing the script locally, you'll need to install this package:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @adobe/jwt-auth\n`}</code></pre>\n    <p>{`If you are running the webhook in Glitch, you'll need to edit the `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file manually and add these this package to the `}<inlineCode parentName=\"p\">{`dependencies`}</inlineCode>{` object. Take a look at the Remix link below if you need help doing this.`}</p>\n    <p>{`The header of the script also needs to be updated to include this dependency, along with the built-in `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` library which will be used to load the private key.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const auth = require('@adobe/jwt-auth')\nconst fs = require('fs')\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-the-getaccesstoken-function\"\n    }}>{`Writing the `}<inlineCode parentName=\"h2\">{`getAccessToken`}</inlineCode>{` Function`}</h2>\n    <p>{`For clarity, it makes sense to organize obtaining the access token into a separate function. The function has assembles the configuration object needed by `}<inlineCode parentName=\"p\">{`jwt-auth`}</inlineCode>{` and then does the token exchange.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`async function getAccessToken () {\n  const config = {\n    clientId: process.env.CLIENT_ID,\n    technicalAccountId: process.env.TECHNICAL_ACCOUNT_ID,\n    orgId: process.env.ORGANIZATION_ID,\n    clientSecret: process.env.CLIENT_SECRET,\n    metaScopes: [ 'ent_cloudmgr_sdk' ]\n  }\n  config.privateKey = fs.readFileSync('.data/private.key')\n\n  const { access_token } = await auth(config)\n  return access_token  \n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getting-the-access-token-in-the-webhook-route\"\n    }}>{`Getting the Access Token in the Webhook Route`}</h2>\n    <p>{`The access token is an asynchronous function so it returns a `}<inlineCode parentName=\"p\">{`Promise`}</inlineCode>{`. So logging of the access token (which is all we're doing in this step) has to be done in a closure invoked when the Promise is resolved:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`if (STARTED === event['@type'] &&\n      EXECUTION === event['xdmEventEnvelope:objectType']) {\n  console.log('received execution start event')\n  getAccessToken().then(accessToken => {\n    console.log(accessToken)\n  })\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"running-the-updated-webhook\"\n    }}>{`Running the Updated Webhook`}</h2>\n    <p>{`If you are running the script locally, you'll need to stop and restart the node process. You don't need to restart ngrok. In fact, if you do restart ngrok, the URL will likely change and you'll need to go back into the `}<a href=\"https://developer.adobe.com/console/projects\" target=\"_new\">{`Adobe Developer Console`}</a>{` and update the Webhook URL.`}</p>\n    <p>{`If you are running the script through Glitch, Glitch will restart automatically. If you don't want to update your existing Glitch project (or lost it), you can click the button below to start over.`}</p>\n    <Glitch projectName=\"adobe-cloudmanager-api-tutorial-step4\" mdxType=\"Glitch\" />\n    <h2 {...{\n      \"id\": \"next-step\"\n    }}>{`Next Step`}</h2>\n    <p>{`With all that done, you're ready to proceed to the next step. Continue to `}<a parentName=\"p\" {...{\n        \"href\": \"5-getting-the-execution.md\"\n      }}>{`Step 5`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","href","target","Glitch","projectName","isMDXComponent"],"sourceRoot":""}