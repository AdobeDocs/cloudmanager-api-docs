"use strict";(self.webpackChunkcloudmanager_api_docs=self.webpackChunkcloudmanager_api_docs||[]).push([[5927],{45112:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return l},default:function(){return h}});var o=n(87462),i=n(63366),a=(n(28387),n(10498)),d=n(91515),r=n(88072),s=["components"],l={},p={_frontmatter:l},c=d.Z;function h(e){var t=e.components,n=(0,i.Z)(e,s);return(0,a.mdx)(c,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"tutorial-step-2---webhook-signature-validation"},"Tutorial Step 2 - Webhook Signature Validation"),(0,a.mdx)("p",null,"In the second step of the tutorial, the webhook from the first step is going to be enhanced to validate that the POST request actually comes from Adobe I/O. Adobe I/O Events\nhas two validation methods. First, there is a field named ",(0,a.mdx)("inlineCode",{parentName:"p"},"recipient_client_id")," in the event body which can be used to validate that the event is intended for a particular\nwebhook. Second, the event payload is digitally signed using a key pair generated by Adobe and the signature is provided in a request header. You can ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/events/docs/guides/#security-considerations"},"read more")," about these verification methods in the Adobe I/O Events documentation."),(0,a.mdx)("h2",{id:"checking-the-client-id"},"Checking the Client ID"),(0,a.mdx)("p",null,"Assuming that you populated the ",(0,a.mdx)("inlineCode",{parentName:"p"},"CLIENT_ID")," value in the ",(0,a.mdx)("inlineCode",{parentName:"p"},".env")," file as directed in the tutorial introduction, this value could simply be compared with the ",(0,a.mdx)("inlineCode",{parentName:"p"},"recipient_client_id")," field in the event, for example by updating the POST handler do this check:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},"app.post('/webhook', (req, res) => {\n  console.log(req.body)\n  if (process.env.CLIENT_ID !== req.body.recipient_client_id) {\n    console.warn(`Unexpected client id. Was expecting ${process.env.CLIENT_ID} and received ${req.body.recipient_client_id}`)\n    res.status(400)\n    res.end()\n    return\n  }\n  res.set('Content-Type', 'text/plain')\n  res.send('pong')\n})\n")),(0,a.mdx)("p",null,"Checking the digital signatures is a bit more complex and outside the scope of this tutorial. Please\nrefer to the ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/events/docs/guides/#security-considerations"},"Adobe I/O Events"),"\ndocumentation for more information."),(0,a.mdx)("h2",{id:"updating-the-webhook"},"Updating the Webhook"),(0,a.mdx)("p",null,"To update your webhook script, just replace the POST handler with the one above. If you are running the script locally, you'll need to stop and restart the node process. You don't need to restart ngrok. In fact, if you do restart ngrok, the URL will likely change and you'll need to go back into the ",(0,a.mdx)("a",{href:"https://developer.adobe.com/console/projects",target:"_new"},"Adobe Developer Console")," and update the Webhook URL."),(0,a.mdx)("p",null,"If you are running the script through Glitch, Glitch will restart automatically. If you don't want to update your existing Glitch project (or lost it), you can click the button below to start over."),(0,a.mdx)(r.Z,{projectName:"adobe-cloudmanager-api-tutorial-step2",mdxType:"Glitch"}),(0,a.mdx)("h2",{id:"next-step"},"Next Step"),(0,a.mdx)("p",null,"With all that done, you're ready to proceed to the next step. Continue to ",(0,a.mdx)("a",{parentName:"p",href:"3-handling-specific-events.md"},"Step 3"),"."))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-tutorial-2-webhook-signature-validation-md-3c0996deabc7a9f4306a.js.map