{"version":3,"sources":["webpack://cloudmanager-api-docs/./src/pages/guides/getting-started/understanding-the-api.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yRAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,yBADR,0BAGA,2EACA,oBACE,eAAIC,WAAW,MAAf,OAA2B,eAAIA,WAAW,MAAf,WAA3B,4HACA,eAAIA,WAAW,MAAf,OAA2B,eAAIA,WAAW,MAAf,YAA3B,2HAEF,kDAAmC,mBAAQA,WAAW,KAAnB,QAAnC,uMACA,4FAA6E,cAAGA,WAAW,IACvF,KAAQ,6BADiE,0BAA7E,6CAEgF,cAAGA,WAAW,IAC1F,KAAQ,+BADoE,4BAFhF,wCASJJ,EAAWK,gBAAiB","file":"component---src-pages-guides-getting-started-understanding-the-api-md-42f7248313186713a931.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/cloudmanager-api-docs/cloudmanager-api-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"understanding-the-api\"\n    }}>{`Understanding the API`}</h1>\n    <p>{`The Cloud Manager API is composed of two components:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An `}<em parentName=\"li\">{`inbound`}</em>{` HTTP-based API which can be used by Cloud Manager customers to read and manipulate the state of their CI/CD pipelines.`}</li>\n      <li parentName=\"ul\">{`An `}<em parentName=\"li\">{`outbound`}</em>{` event system which allows Cloud Manager customers to receive events when key events happen in their CI/CD pipelines.`}</li>\n    </ul>\n    <p>{`While it is possible to use `}<strong parentName=\"p\">{`only`}</strong>{` one or the other of these components, in most cases integrations will use both components. That said, it is best to start with just one, get it working, and then move on to the other component.`}</p>\n    <p>{`The steps to get started are different for these two components. Read `}<a parentName=\"p\" {...{\n        \"href\": \"create-api-integration.md\"\n      }}>{`Create API Integration`}</a>{` to get started with the inbound API and `}<a parentName=\"p\" {...{\n        \"href\": \"create-event-integration.md\"\n      }}>{`Create Event Integration`}</a>{` to get started with the event API.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}